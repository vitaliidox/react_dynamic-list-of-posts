{"version":3,"sources":["components/PostsList.tsx","utils/fetchClient.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","api/comment.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/user.tsx","api/post.tsx","index.tsx"],"names":["PostsList","posts","openedPost","setOpenedPost","setCommentsList","setIsVisibleForm","className","map","post","id","title","type","classNames","onClick","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","Loader","NewCommentForm","setComments","comments","setIsErrorSide","useState","authorName","setAuthorName","authorEmail","setAuthorEmail","commentText","setCommentText","isLoading","setIsLoading","isEmptyName","setIsEmptyName","isEmptyEmail","setIsEmptyEmail","isEmptyBody","setIsEmptyBody","setAllFieldsNotEmpty","addNewComment","commentData","postId","name","email","catch","finally","htmlFor","placeholder","value","onChange","event","target","preventDefault","PostDetails","isLoadingSidebar","isErrorSide","isVisibleForm","handleDeleteComment","commentId","deleteComment","filter","element","length","item","href","UserSelector","selectedUser","setSelectedUser","users","setUsersPost","isActiveButton","setIsActivebutton","setUserAndPosts","user","role","App","setUsers","isError","setIsError","setIsLoadingSidebar","setPosts","setUsersList","useMemo","useEffect","userId","getComments","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6e6cf7e4.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[] | null,\n  openedPost: Post | null,\n  setOpenedPost: (arg: Post | null) => void,\n  setCommentsList: (arg: number) => void,\n  setIsVisibleForm: (arg: boolean) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  openedPost,\n  setOpenedPost,\n  setCommentsList,\n  setIsVisibleForm,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts?.map((post) => (\n          <tr\n            key={post.id}\n            data-cy=\"Post\"\n          >\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className={classNames(\n                  'button is-link',\n                  { 'is-light': openedPost?.id !== post.id },\n                )}\n                onClick={() => {\n                  setOpenedPost(openedPost === post ? null : post);\n                  setCommentsList(post.id);\n                  setIsVisibleForm(false);\n                }}\n              >\n                { openedPost?.id !== post.id\n                  ? 'Open' : 'Close' }\n              </button>\n            </td>\n          </tr>\n        ))}\n\n      </tbody>\n    </table>\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request<any>(url, 'DELETE'),\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { addComment } from '../api/comment';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  setComments: (arg: Comment[]) => void,\n  comments: Comment[],\n  setIsErrorSide: (arg: boolean) => void,\n  openedPost: Post | null,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  setComments,\n  comments,\n  setIsErrorSide,\n  openedPost,\n}) => {\n  const [authorName, setAuthorName] = useState<string>();\n  const [authorEmail, setAuthorEmail] = useState<string>();\n  const [commentText, setCommentText] = useState<string>();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isEmptyName, setIsEmptyName] = useState(false);\n  const [isEmptyEmail, setIsEmptyEmail] = useState(false);\n  const [isEmptyBody, setIsEmptyBody] = useState(false);\n\n  const setAllFieldsNotEmpty = () => {\n    setIsEmptyName(false);\n    setIsEmptyEmail(false);\n    setIsEmptyBody(false);\n  };\n\n  const addNewComment = () => {\n    if (authorName && commentText && authorEmail) {\n      const commentData = {\n        postId: openedPost?.id,\n        name: authorName,\n        email: authorEmail,\n        body: commentText,\n      };\n\n      setAllFieldsNotEmpty();\n      setIsLoading(true);\n      addComment(commentData)\n        .then((data) => {\n          if (!('error' in data)) {\n            setComments([...comments, data]);\n          }\n\n          setIsErrorSide('error' in data);\n        })\n        .catch(() => setIsErrorSide(true))\n        .finally(() => {\n          setIsLoading(false);\n          setCommentText('');\n        });\n    } else {\n      setIsEmptyName(!authorName);\n      setIsEmptyEmail(!authorEmail);\n      setIsEmptyBody(!commentText);\n    }\n  };\n\n  const handleResetForm = () => {\n    setAllFieldsNotEmpty();\n\n    setAuthorName('');\n    setAuthorEmail('');\n    setCommentText('');\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': isEmptyName && !authorName },\n            )}\n            value={authorName}\n            onChange={(event) => {\n              setAuthorName(event.target.value);\n              setIsEmptyName(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {(isEmptyName && !authorName) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {(isEmptyName && !authorName) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': isEmptyEmail && !authorEmail },\n            )}\n            value={authorEmail}\n            onChange={(event) => {\n              setAuthorEmail(event.target.value);\n              setIsEmptyEmail(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {(isEmptyEmail && !authorEmail) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {(isEmptyEmail && !authorEmail) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': isEmptyBody && !commentText },\n            )}\n            value={commentText}\n            onChange={(event) => {\n              setCommentText(event.target.value);\n              setIsEmptyBody(false);\n            }}\n          />\n        </div>\n\n        {(isEmptyBody && !commentText) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': isLoading },\n            )}\n            onClick={(event) => {\n              event.preventDefault();\n              addNewComment();\n            }}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={(event) => {\n              event.preventDefault();\n              handleResetForm();\n            }}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { Comment, CommentData } from '../types/Comment';\n\nexport const addComment = (data: CommentData) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React from 'react';\nimport { deleteComment } from '../api/comment';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  isLoadingSidebar: boolean,\n  comments: Comment[],\n  isErrorSide: boolean,\n  openedPost: Post | null,\n  setIsErrorSide: (arg: boolean) => void,\n  setComments: (arg: Comment[]) => void,\n  isVisibleForm: boolean,\n  setIsVisibleForm: (arg: boolean) => void,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  isLoadingSidebar,\n  comments,\n  isErrorSide,\n  openedPost,\n  setIsErrorSide,\n  setComments,\n  isVisibleForm,\n  setIsVisibleForm,\n}) => {\n  const handleDeleteComment = (commentId: number) => {\n    deleteComment(commentId)\n      .then(() => {\n        setComments(comments.filter((element) => element.id !== commentId));\n        // console.log(data);\n      })\n      .catch(() => setIsErrorSide(true));\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${openedPost?.id}: ${openedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {openedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoadingSidebar && (\n            <Loader />\n          )}\n\n          {isErrorSide && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {comments.length === 0 && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {comments.length > 0 && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n              {comments.map((item) => (\n                <article\n                  key={item.id}\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                >\n                  <div className=\"message-header\">\n                    <a href=\"mailto:misha@mate.academy\" data-cy=\"CommentAuthor\">\n                      {item.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDeleteComment(item.id)}\n                    >\n                      Delete comment\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {item.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {!isVisibleForm && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsVisibleForm(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isVisibleForm && (\n          <NewCommentForm\n            openedPost={openedPost}\n            comments={comments}\n            setComments={setComments}\n            setIsErrorSide={setIsErrorSide}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { Post } from '../types/Post';\n\nimport { User } from '../types/User';\n\ntype Props = {\n  selectedUser: User | null,\n  setSelectedUser: React.Dispatch<React.SetStateAction<User | null>>,\n  users: User[],\n  setUsersPost: (arg: User) => void,\n  setOpenedPost: (arg: Post | null) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  selectedUser,\n  setSelectedUser,\n  users,\n  setUsersPost,\n  setOpenedPost,\n}) => {\n  const [isActiveButton, setIsActivebutton] = useState(false);\n  const setUserAndPosts = (user: User) => {\n    if (selectedUser === user) {\n      return;\n    }\n\n    setOpenedPost(null);\n    setSelectedUser(user);\n    setUsersPost(user);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': isActiveButton },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsActivebutton(!isActiveButton)}\n        >\n          <span>{selectedUser?.name || 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.length > 0 && users.map((user) => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': user.id === selectedUser?.id },\n              )}\n              onClick={async (event) => {\n                event.preventDefault();\n                setUserAndPosts(user);\n                setIsActivebutton(false);\n              }}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect, useMemo } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nimport { getUsers } from './api/user';\nimport { getPosts } from './api/post';\nimport { getComments } from './api/comment';\n\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isError, setIsError] = useState(false);\n  const [isErrorSide, setIsErrorSide] = useState(false);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoadingSidebar, setIsLoadingSidebar] = useState(false);\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [openedPost, setOpenedPost] = useState<Post | null>(null);\n  const [isVisibleForm, setIsVisibleForm] = useState(false);\n\n  const setUsersList = useMemo(() => () => {\n    getUsers()\n      .then((data) => {\n        setUsers(data);\n        setIsError('error' in data);\n      })\n      .catch(() => setIsError(true));\n  }, []);\n\n  const setUsersPost = (user: User) => {\n    if (user) {\n      setIsLoading(true);\n      setPosts(null);\n\n      getPosts(user.id)\n        .then((data) => {\n          setPosts(data);\n          setIsError('error' in data);\n        })\n        .catch(() => setIsError(true))\n        .finally(() => setIsLoading(false));\n    }\n  };\n\n  const setCommentsList = (postId: number) => {\n    if (openedPost?.id === postId) {\n      return;\n    }\n\n    setIsLoadingSidebar(true);\n    getComments(postId)\n      .then((data) => {\n        setComments(data);\n        setIsErrorSide('error' in data);\n      })\n      .catch(() => setIsErrorSide(true))\n      .finally(() => setIsLoadingSidebar(false));\n  };\n\n  useEffect(() => {\n    setUsersList();\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                  users={users}\n                  setUsersPost={setUsersPost}\n                  setOpenedPost={setOpenedPost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && (\n                  <Loader />\n                )}\n\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {posts?.length === 0 && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {(posts ? posts.length > 0 : null) && (\n                  <PostsList\n                    openedPost={openedPost}\n                    setOpenedPost={setOpenedPost}\n                    posts={posts}\n                    setCommentsList={setCommentsList}\n                    setIsVisibleForm={setIsVisibleForm}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              `Sidebar--${openedPost ? 'open' : 'close'}`,\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails\n                setIsErrorSide={setIsErrorSide}\n                openedPost={openedPost}\n                isErrorSide={isErrorSide}\n                isLoadingSidebar={isLoadingSidebar}\n                comments={comments}\n                setComments={setComments}\n                isVisibleForm={isVisibleForm}\n                setIsVisibleForm={setIsVisibleForm}\n              />\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const patchPost = (postId: number) => {\n  return client.get<Post[]>(`/posts/${postId}`);\n};\n\nexport const addPost = (data: Post) => {\n  return client.post('/posts', data);\n};\n\nexport const deletePost = (postId: number) => {\n  return client.delete(`/posts/${postId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}